.. highlight:: python

=======================================
Документация для Работы с Базой Данных
=======================================

Этот документ содержит обзор и документацию для кода `database.py`_., связанного с работой с базой данных в приложении.

.. _`database.py`: https://github.com/ILarious/TEST/blob/test_V1/backend/core/database.py

Конфигурация Базы Данных
-------------------------

Для настройки и работы с базой данных используются параметры конфигурации, полученные из переменных окружения.

- `DB_HOST`: Хост базы данных.
- `DB_PORT`: Порт базы данных.
- `DB_NAME`: Имя базы данных.
- `DB_USER`: Имя пользователя базы данных.
- `DB_PASS`: Пароль пользователя базы данных.

Формирование строки подключения к базе данных PostgreSQL
-------------------------------------------------------

Формируется строка подключения к базе данных PostgreSQL на основе конфигурационных параметров.

.. code:: python

    DATABASE_URL: str = f"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

Создание базового класса для ORM-моделей SQLAlchemy
---------------------------------------------------

Создается базовый класс `Base` для определения ORM-моделей SQLAlchemy.

Создание асинхронного движка SQLAlchemy для работы с базой данных
-----------------------------------------------------------------

Создается асинхронный движок SQLAlchemy для выполнения асинхронных операций с базой данных.

.. code:: python

    engine: AsyncEngine = create_async_engine(DATABASE_URL)

Создание асинхронной фабрики сессий для работы с базой данных
--------------------------------------------------------------

Создается асинхронная фабрика сессий `async_session_maker` для работы с базой данных. Эта фабрика создает и управляет асинхронными сессиями SQLAlchemy.

.. code:: python

    async_session_maker: AsyncGenerator[AsyncSession, None] = sessionmaker(
        engine, class_=AsyncSession, expire_on_commit=False
    )

Функция для получения асинхронной сессии базы данных
----------------------------------------------------

Создается функция `get_async_session()`, которая возвращает асинхронную сессию базы данных. Сессия создается и управляется фабрикой сессий `async_session_maker`.

.. code:: python

    async def get_async_session() -> AsyncGenerator[AsyncSession, None]:
        async with async_session_maker() as session:
            yield session

Этот код обеспечивает настройку и доступ к асинхронной сессии базы данных в приложении.
