.. highlight:: python

=======================
Документация для Моделей
=======================

Этот документ содержит обзор и документацию для Pydantic моделей `schemas.py`_, представляющих сущности "Сотрудник" и "Задача".

.. _`schemas.py`: https://github.com/ILarious/TEST/blob/test_V1/backend/schemes/schemas.py

Модель Сотрудника (Employee)
------------------------

Модель `Employee` представляет сущность "Сотрудник".

Поля:

- `full_name` (строка): Полное имя сотрудника.
- `position` (строка): Должность сотрудника.
- `id` (целое число): Уникальный идентификатор сотрудника.
- `tasks` (список задач): Список задач, связанных с сотрудником (опционально).

Модель Сотрудника для Создания (EmployeeCreate)
---------------------------------------------

Модель `EmployeeCreate` используется для создания нового сотрудника.

Она наследует поля `full_name` и `position` из модели `EmployeeBase`.

Модель Сотрудника для Обновления (EmployeeUpdate)
---------------------------------------------

Модель `EmployeeUpdate` используется для обновления существующего сотрудника.

Она наследует поля `full_name` и `position` из модели `EmployeeBase`.

Модель Задачи (Task)
------------------

Модель `Task` представляет сущность "Задача".

Поля:

- `title` (строка): Заголовок задачи.
- `parent_id` (целое число): Идентификатор родительской задачи (опционально).
- `assignee_id` (целое число): Идентификатор сотрудника, назначенного на задачу (опционально).
- `deadline` (дата): Дедлайн задачи (опционально).
- `status` (строка): Статус задачи.
- `id` (целое число): Уникальный идентификатор задачи.
- `assignee` (сотрудник): Сотрудник, назначенный на задачу (опционально).
- `subtasks` (список подзадач): Список подзадач (опционально).

Модель Задачи для Создания (TaskCreate)
--------------------------------------

Модель `TaskCreate` используется для создания новой задачи.

Она наследует поля `title` и `status` из модели `TaskBase`.

Модель Задачи для Обновления (TaskUpdate)
--------------------------------------

Модель `TaskUpdate` используется для обновления существующей задачи.

Она наследует поля `title` и `status` из модели `TaskBase`.

Схема Задачи (TaskSchema)
------------------------

Схема `TaskSchema` представляет собой упрощенную версию модели `Task`, используемую для представления данных задачи без учета связей.

Поля:

- `title` (строка): Заголовок задачи.
- `parent_id` (целое число): Идентификатор родительской задачи (опционально).
- `assignee_id` (целое число): Идентификатор сотрудника, назначенного на задачу (опционально).
- `deadline` (дата): Дедлайн задачи (опционально).
- `status` (строка): Статус задачи.
- `id` (целое число): Уникальный идентификатор задачи.

Схема Сотрудника (EmployeeSchema)
-------------------------------

Схема `EmployeeSchema` представляет собой упрощенную версию модели `Employee`, используемую для представления данных сотрудника без учета связей.

Поля:

- `full_name` (строка): Полное имя сотрудника.
- `position` (строка): Должность сотрудника.
- `id` (целое число): Уникальный идентификатор сотрудника.

Эта документация описывает структуру и использование ваших Pydantic моделей для представления данных сотрудников и задач в вашем приложении.
