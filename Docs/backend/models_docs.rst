.. highlight:: python

==============================
Документация для ORM-Моделей
==============================

Этот документ содержит обзор и документацию для кода `models.py`_., связанного с определением ORM-моделей SQLAlchemy для сущностей "Сотрудник" и "Задача".

.. _`models.py`: https://github.com/ILarious/TEST/blob/test_V1/backend/models/models.py

ORM-Модель "Сотрудник" (Employee)
-----------------------------------

ORM-модель `Employee` представляет сущность "Сотрудник" в базе данных.

Таблица в базе данных: `employees`

Поля:

- `id` (целое число): Первичный ключ, уникальный идентификатор сотрудника.
- `full_name` (строка): Полное имя сотрудника.
- `position` (строка): Должность сотрудника.

Связь:
- `tasks` (список задач): Связь с ORM-моделью "Задача". Отношение "один ко многим" с обратной связью.

ORM-Модель "Задача" (Task)
---------------------------

ORM-модель `Task` представляет сущность "Задача" в базе данных.

Таблица в базе данных: `tasks`

Поля:
-`id` (целое число): Первичный ключ, уникальный идентификатор задачи.
- `title` (строка): Заголовок задачи.
- `parent_id` (целое число): Идентификатор родительской задачи, если есть.
- `assignee_id` (целое число): Идентификатор сотрудника, назначенного на задачу.
- `deadline` (дата): Дата завершения задачи.
- `status` (строка): Статус задачи.

Связи:
- `assignee` (сотрудник): Связь с ORM-моделью "Сотрудник". Отношение "многие к одному" с обратной связью.
- `subtasks` (список подзадач): Связь с самой собой (ORM-модель "Задача"). Отношение "один ко многим" с обратной связью.

Модуль Metadata (metadata)
----------------------------

Модуль `metadata` содержит объект метаданных SQLAlchemy, который используется для хранения метаданных таблиц и отношений между ними в базе данных.

.. code:: python

    metadata: Optional[MetaData] = Base.metadata

Base (Базовый Класс ORM)
-------------------------

`Base` представляет базовый класс для определения ORM-моделей SQLAlchemy и используется для создания таблиц и отношений в базе данных.

.. code:: python

    Base: declarative_base = declarative_base()

Создание таблиц и отношений в базе данных
------------------------------------------

ORM-модели `Employee` и `Task` определяют структуру таблиц и связей в базе данных. Поля и связи моделей соответствуют структуре таблиц и отношений в базе данных.

Создание асинхронного движка и сессий SQLAlchemy
-------------------------------------------------

Создаются асинхронный движок SQLAlchemy (`engine`) и фабрика асинхронных сессий SQLAlchemy (`async_session_maker`), которые используются для выполнения асинхронных операций с базой данных.

.. code:: python

    engine: AsyncEngine = create_async_engine(DATABASE_URL)
    async_session_maker: AsyncGenerator[AsyncSession, None] = sessionmaker(
        engine, class_=AsyncSession, expire_on_commit=False
    )

Этот код обеспечивает определение структуры базы данных и доступ к базе данных в приложении.
